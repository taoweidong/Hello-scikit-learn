#!/usr/bin/env python3
"""
Ê†∏ÂøÉÊûÑÂª∫Âô®Ê®°Âùó
Êèê‰æõÈÄöÁî®ÁöÑÊûÑÂª∫ÂäüËÉΩÂíåÊé•Âè£
"""

import os
import sys
import platform
import subprocess
import shutil
from pathlib import Path
from typing import List, Optional, Tuple, Dict, Any
from loguru import logger

from .package_config import PackageConfig


class BuildResult:
    """ÊûÑÂª∫ÁªìÊûúÁ±ª"""
    
    def __init__(self, script_name: str, success: bool, error_message: Optional[str] = None):
        self.script_name = script_name
        self.success = success
        self.error_message = error_message
        self.executable_path: Optional[str] = None
    
    def __repr__(self):
        status = "‚úÖ" if self.success else "‚ùå"
        return f"{status} {self.script_name}: {'ÊàêÂäü' if self.success else self.error_message}"


class BaseBuilder:
    """Âü∫Á°ÄÊûÑÂª∫Âô®"""
    
    def __init__(self, config: Optional[PackageConfig] = None):
        self.config = config or PackageConfig()
        self.platform_name, self.arch = self._get_platform_info()
        
        # ÈÖçÁΩÆÊó•Âøó
        logger.add(
            f"logs/build_{self.platform_name}_{self.arch}_{{time:YYYY-MM-DD}}.log",
            rotation="1 day",
            level="INFO"
        )
    
    def _get_platform_info(self) -> Tuple[str, str]:
        """Ëé∑ÂèñÂπ≥Âè∞‰ø°ÊÅØ"""
        system = platform.system().lower()
        arch = platform.machine().lower()
        
        if system == "windows":
            return "windows", arch
        elif system == "linux":
            return "linux", arch
        elif system == "darwin":
            return "macos", arch
        else:
            return system, arch
    
    def clean_build_dirs(self) -> None:
        """Ê∏ÖÁêÜÊûÑÂª∫ÁõÆÂΩï"""
        dirs_to_clean = [
            self.config.DIST_DIR,
            self.config.TEMP_DIR
        ]
        
        # Ê∏ÖÁêÜdistÂíåtempÁõÆÂΩïÔºå‰ΩÜ‰øùÁïôbuildÁõÆÂΩïÁªìÊûÑ
        for dir_name in dirs_to_clean:
            if os.path.exists(dir_name):
                logger.info(f"Ê∏ÖÁêÜÁõÆÂΩï: {dir_name}")
                shutil.rmtree(dir_name)
        
        # Ê∏ÖÁêÜbuildÁõÆÂΩï‰∏≠ÁöÑÂ≠êÁõÆÂΩïÔºå‰ΩÜ‰øùÁïôÁõÆÂΩïÁªìÊûÑÁî®‰∫éÂ≠òÊîæspecÊñá‰ª∂
        if os.path.exists(self.config.BUILD_DIR):
            for item in os.listdir(self.config.BUILD_DIR):
                item_path = os.path.join(self.config.BUILD_DIR, item)
                if os.path.isdir(item_path):
                    logger.info(f"Ê∏ÖÁêÜÊûÑÂª∫Â≠êÁõÆÂΩï: {item_path}")
                    shutil.rmtree(item_path)
                elif item.endswith('.spec'):
                    # ‰øùÁïôspecÊñá‰ª∂Ôºå‰∏çÂà†Èô§
                    logger.debug(f"‰øùÁïôspecÊñá‰ª∂: {item_path}")
        
        # ÈáçÊñ∞ÂàõÂª∫ÂøÖË¶ÅÁõÆÂΩï
        os.makedirs(self.config.DIST_DIR, exist_ok=True)
        os.makedirs(self.config.BUILD_DIR, exist_ok=True)
        logger.info("ÊûÑÂª∫ÁõÆÂΩïÊ∏ÖÁêÜÂÆåÊàê")
    
    def install_dependencies(self) -> bool:
        """ÂÆâË£ÖÊûÑÂª∫‰æùËµñ"""
        try:
            logger.info("ÂÆâË£ÖÊûÑÂª∫‰æùËµñ...")
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
            ], stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
            logger.success("‰æùËµñÂÆâË£ÖÂÆåÊàê")
            return True
        except subprocess.CalledProcessError as e:
            logger.error(f"‰æùËµñÂÆâË£ÖÂ§±Ë¥•: {e}")
            return False
    
    def validate_environment(self) -> bool:
        """È™åËØÅÊûÑÂª∫ÁéØÂ¢É"""
        logger.info("È™åËØÅÊûÑÂª∫ÁéØÂ¢É...")
        
        # Ê£ÄÊü•ÈÖçÁΩÆ
        if not self.config.validate_environment():
            logger.error("ÁéØÂ¢ÉÈ™åËØÅÂ§±Ë¥•")
            return False
        
        # Ê£ÄÊü•PyInstaller
        try:
            subprocess.check_call(
                ["pyinstaller", "--version"], 
                stdout=subprocess.DEVNULL, 
                stderr=subprocess.DEVNULL
            )
        except (subprocess.CalledProcessError, FileNotFoundError):
            logger.error("PyInstaller Êú™ÂÆâË£ÖÊàñ‰∏çÂèØÁî®")
            return False
        
        logger.success("ÁéØÂ¢ÉÈ™åËØÅÈÄöËøá")
        return True
    
    def build_single_executable(self, script_name: str) -> BuildResult:
        """ÊûÑÂª∫Âçï‰∏™ÂèØÊâßË°åÊñá‰ª∂"""
        script_path = Path(script_name)
        exe_name = script_path.stem
        
        logger.info(f"ÂºÄÂßãÊûÑÂª∫ {exe_name}...")
        
        # ÁîüÊàêÊûÑÂª∫ÂëΩ‰ª§
        cmd = self.config.get_build_command(script_name, self.platform_name, self.arch)
        
        try:
            # ÊâßË°åÊûÑÂª∫
            result = subprocess.run(
                cmd,
                check=True,
                capture_output=True,
                text=True
            )
            
            # Ê£ÄÊü•ËæìÂá∫Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
            platform_config = self.config.get_platform_config(self.platform_name)
            executable_name = exe_name + platform_config["executable_suffix"]
            executable_path = Path(self.config.DIST_DIR) / f"{self.platform_name}-{self.arch}" / executable_name
            
            if executable_path.exists():
                build_result = BuildResult(script_name, True)
                build_result.executable_path = str(executable_path)
                logger.success(f"‚úÖ {exe_name} ÊûÑÂª∫ÊàêÂäü: {executable_path}")
                return build_result
            else:
                return BuildResult(script_name, False, f"ËæìÂá∫Êñá‰ª∂Êú™ÊâæÂà∞: {executable_path}")
        
        except subprocess.CalledProcessError as e:
            error_msg = f"ÊûÑÂª∫Â§±Ë¥•: {e.stderr if e.stderr else str(e)}"
            logger.error(f"‚ùå {exe_name} {error_msg}")
            return BuildResult(script_name, False, error_msg)
    
    def build_all_executables(self) -> List[BuildResult]:
        """ÊûÑÂª∫ÊâÄÊúâÂèØÊâßË°åÊñá‰ª∂"""
        logger.info(f"üîß ÂºÄÂßãÊûÑÂª∫ {self.config.PROJECT_NAME}")
        logger.info(f"Ê£ÄÊµãÂà∞Âπ≥Âè∞: {self.platform_name}-{self.arch}")
        
        results = []
        
        # Ê∏ÖÁêÜÊûÑÂª∫ÁõÆÂΩï
        self.clean_build_dirs()
        
        # È™åËØÅÁéØÂ¢É
        if not self.validate_environment():
            return [BuildResult("ÁéØÂ¢ÉÈ™åËØÅ", False, "ÁéØÂ¢ÉÈ™åËØÅÂ§±Ë¥•")]
        
        # ÂÆâË£Ö‰æùËµñ
        if not self.install_dependencies():
            return [BuildResult("‰æùËµñÂÆâË£Ö", False, "‰æùËµñÂÆâË£ÖÂ§±Ë¥•")]
        
        # ÊûÑÂª∫ÊâÄÊúâËÑöÊú¨
        for script in self.config.MAIN_SCRIPTS:
            if os.path.exists(script):
                result = self.build_single_executable(script)
                results.append(result)
            else:
                logger.warning(f"ËÑöÊú¨Êñá‰ª∂ {script} ‰∏çÂ≠òÂú®ÔºåË∑≥Ëøá")
                results.append(BuildResult(script, False, "Êñá‰ª∂‰∏çÂ≠òÂú®"))
        
        return results
    
    def create_distribution_package(self) -> bool:
        """ÂàõÂª∫ÂàÜÂèëÂåÖ"""
        dist_platform_dir = Path(self.config.DIST_DIR) / f"{self.platform_name}-{self.arch}"
        
        if not dist_platform_dir.exists():
            logger.warning(f"ÂàÜÂèëÁõÆÂΩï {dist_platform_dir} ‰∏çÂ≠òÂú®")
            return False
        
        logger.info("ÂàõÂª∫ÂàÜÂèëÂåÖ...")
        
        # Â§çÂà∂ÈÖçÁΩÆÂíåËØ¥ÊòéÊñá‰ª∂
        for file_name in self.config.DISTRIBUTION_FILES:
            if os.path.exists(file_name):
                shutil.copy2(file_name, dist_platform_dir)
                logger.debug(f"Â§çÂà∂Êñá‰ª∂: {file_name}")
        
        # ÂàõÂª∫ÂøÖË¶ÅÁõÆÂΩï
        for dir_name in self.config.REQUIRED_DIRS:
            target_dir = dist_platform_dir / dir_name
            target_dir.mkdir(exist_ok=True)
            logger.debug(f"ÂàõÂª∫ÁõÆÂΩï: {target_dir}")
        
        logger.success(f"‚úÖ ÂàÜÂèëÂåÖÂàõÂª∫ÂÆåÊàê: {dist_platform_dir}")
        return True
    
    def get_build_summary(self, results: List[BuildResult]) -> Dict[str, Any]:
        """Ëé∑ÂèñÊûÑÂª∫ÊëòË¶Å"""
        successful = [r for r in results if r.success]
        failed = [r for r in results if not r.success]
        
        return {
            "platform": f"{self.platform_name}-{self.arch}",
            "total": len(results),
            "successful": len(successful),
            "failed": len(failed),
            "success_rate": len(successful) / len(results) if results else 0,
            "successful_builds": [r.script_name for r in successful],
            "failed_builds": [(r.script_name, r.error_message) for r in failed],
            "output_directory": f"{self.config.DIST_DIR}/{self.platform_name}-{self.arch}"
        }